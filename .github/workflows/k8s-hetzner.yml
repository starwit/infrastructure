# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the main branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
name: 'Terraform'

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      tfworkspace:
        description: "terraform environment and workspace: *dev*, *int* or *prod*"
        required: true
        default: "dev"

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./kubernetes-hetzner

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Checkout external repo üõéÔ∏è
        uses: actions/checkout@v2
        with:
          repository: starwit/tfstate
          token: ${{ secrets.TFSTATE_PERSONAL_TOKEN }} # permission to access to external repositories
          path: kubernetes-hetzner/terraform.tfstate.d
      
      - name: Set tfworkspace to default value if empty
        id: checktfworkspace
        run: |
          if [ "${{ github.event.inputs.tfworkspace }}" == "" ]
          then
            echo ::set-output name=tfworkspace::dev
          else
            echo ::set-output name=tfworkspace::${{ github.event.inputs.tfworkspace }}
          fi

      - name: Go to terraform directory
        run: ls

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_VAR_hcloud_token }}

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init

      - name: switch workspace
        run: terraform workspace new ${{ steps.checktfworkspace.outputs.tfworkspace }}

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan
        env: 
          TF_VAR_HCLOUD_TOKEN: ${{ secrets.TF_VAR_HCLOUD_TOKEN }}

        # On push to main, build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      #- name: Terraform Apply
      #  if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      #  run: terraform apply -auto-approve

      - name: commit terraform state
        run: |
          cd kubernetes-hetzner/terraform.tfstate.d
          git config --global user.name 'automatic push'
          git config --global user.email 'witchpou@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${{ secrets.TFSTATE_PERSONAL_TOKEN }}@github.com/statwit/tfstate
          git add .
          git commit -am "automated report"
          git push
      
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          repository: starwit/tfstate
          github_token: ${{ secrets.TFSTATE_PERSONAL_TOKEN }}
          branch: main

